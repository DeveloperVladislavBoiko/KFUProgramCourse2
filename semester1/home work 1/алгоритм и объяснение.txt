АРАБСКИЕ В РИМСКИЕ

Словарь arabic_to_roman:
    1000: "M"
    900:  "CM"  // Важно включать комбинации вычитания
    500:  "D"
    400:  "CD"
    100:  "C"
    90:   "XC"
    50:   "L"
    40:   "XL"
    10:   "X"
    9:    "IX"
    5:    "V"
    4:    "IV"
    1:    "I"

ПРИМЕР АРАБСКИЙ В РИМСКИЕ C ОБЪЯССНЕНИЕМ АЛГОРИТМА

Цикл ПОКА: Для каждого значения из словаря мы проверяем: "Сколько раз это значение помещается в remaining?".

Например, для числа 2024:

1000 ("M") помещается 2 раза. Добавляем "MM", remaining становится 24.

Далее идут 900, 500, 400, 100, 90, 50, 40 — все они больше 24, поэтому пропускаем.

10 ("X") помещается 2 раза. Добавляем "XX", remaining становится 4.

9, 5 пропускаем.

4 ("IV") помещается 1 раз. Добавляем "IV", remaining становится 0.

Результат: "MMXXIV".

РИМСКИЕ В АРАБСКИЕ 


Словарь roman_to_arabic:
    'M': 1000
    'D': 500
    'C': 100
    'L': 50
    'X': 10
    'V': 5
    'I': 1

ПРИМЕР И ОБЪЯСНЕНИЕ АЛГОРИТМА

Инициализация: total для накопления результата, prev_value для запоминания значения предыдущего обработанного символа.

Проход справа налево: Это самый простой способ обработать правило вычитания. Мы начинаем с младшего разряда.

Обработка текущего символа:

Смотрим на значение текущего символа (current_value).

Ключевое правило: Если current_value меньше, чем prev_value, это означает, что мы имеем дело с комбинацией вычитания (например, I перед V или X перед C). В этом случае мы вычитаем current_value из total.

Иначе, мы просто прибавляем current_value к total.

НЮАНСЫ РЕАЛИЗАЦИИ
написать два метода перевода чисел 1) из арабских в римские 2) из римских в арабские 

ТЕХНИЧЕСКОЕ ЗАДАНИЕ 
    В классе римских чисел:
+ - 3 конструктора: с параметрами int, string и по умолчанию;
+ - 1 поле для хранения значения числа;
+- в методах преобразования использовать 2 массива по 7 или 13 элементов для
+    хранения цифр в арабской и римской записях, либо, если понимаете,
+    использовать для этого словарь (Dictionary<Int, String>);
+ - реализовать метод ToString;
+ - реализовать операторы для выполнения арифметических операций (+, -, *, /);
+ - минимум 2 свойства для доступа к значению  в представлениях int и string;
+ - методы для преобразования числа из int в string и наоборот;
+ - реализовать операторы сравнения римских чисел (<. >, <=, >=, ==, !=);
- реализовать функции сравнения объектов Equals, HashCode;
- продемонстрировать возможности созданного класса,
+     проверить и корректную работу всех элементов класса.